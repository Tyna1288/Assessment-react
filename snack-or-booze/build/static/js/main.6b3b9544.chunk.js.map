{"version":3,"sources":["Home.js","Api.js","NavBar.js","MealMenu.js","MealItem.js","AddForm.js","App.js","serviceWorker.js","index.js"],"names":["Home","_ref","snacks","drinks","_jsx","className","children","Card","_jsxs","CardBody","CardTitle","CardText","length","BASE_API_URL","async","addMeal","axios","get","concat","data","NavBar","meal","links","map","NavLink","to","name","toLowerCase","Navbar","expand","exact","Nav","navbar","NavItem","MealMenu","title","mealItems","ListGroup","mealItem","Link","id","ListGroupItem","MealItem","cantFind","useParams","find","description","recipe","serve","Redirect","AddForm","form","setForm","useState","type","history","useHistory","handleChange","evt","value","target","f","Form","onSubmit","preventDefault","push","FormGroup","Label","for","Input","onChange","Button","App","isLoading","setIsLoading","menu","setMenu","useEffect","SnackOrBoozeApi","getSnacks","getDrinks","getMealItems","BrowserRouter","Switch","Route","path","Menu","mealitems","objData","slugify","lower","m","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b3b9544.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardBody, CardTitle, CardText } from \"reactstrap\";\n\nfunction Home({ snacks, drinks }) {\n  return (\n    <section className=\"col-md-8\">\n      <Card>\n        <CardBody className=\"text-center\">\n          <CardTitle>\n            <h3 className=\"font-weight-bold\">\n              Welcome to Silicon Valley's premier dive cafe!\n            </h3>\n          </CardTitle>\n          <CardText>\n            Our menu includes {snacks.length} snacks and {drinks.length} drinks.\n          </CardText>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default Home;\n","import axios from \"axios\";\nimport { addMeal as SnackOrBoozeApi } from \"./Api\";\n\nconst BASE_API_URL = \"http://localhost:5000\";\n\n/* \n  json-server will give you CRUD endpoints on snacks and drinks.\n  Here we've provided you with a single action to get all drinks.\n\n  You'll need to add to this class as you build features for the app.\n*/\n\n\n  export async function addMeal() {\n    const result = await axios.get(`${BASE_API_URL}/meal`);\n    return result.data;\n  }\n\n\nexport default SnackOrBoozeApi;\n","import React from \"react\";\nimport \"./NavBar.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { Navbar, Nav, NavItem } from \"reactstrap\";\n\nfunction NavBar({ meal }) {\n  const links = meal.map(meal => (\n    <NavLink key={meal.name} to={`/meal/${meal.name.toLowerCase()}`} >\n      {meal.name}\n    </NavLink>\n  ));\n  return (\n    <div>\n      <Navbar expand=\"md\">\n        <NavLink exact to=\"/\" className=\"navbar-brand\">\n          Snack or Booze\n        </NavLink>\n\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink to=\"/snacks\">Snacks</NavLink>\n            {links}\n          </NavItem>\n          <NavItem>\n            <NavLink to=\"/drinks\">Drinks</NavLink>\n            {links}\n          </NavItem>\n        </Nav>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./MealMenu.css\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardText,\n  ListGroup,\n  ListGroupItem\n} from \"reactstrap\";\n\n\n\nfunction MealMenu({ title, mealItems }) {\n  return (\n    <section className=\"col-md-4\">\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n            {title} MealMenu\n          </CardTitle>\n          <CardText>\n            Some quick example text to build on the card title and make up the\n            bulk of the card's content.\n          </CardText>\n          <ListGroup>\n            {mealItems.map(mealItem => (\n              <Link to={`/${title.toLowerCase()}/${mealItem.id}`} key={mealItem.id}>\n                <ListGroupItem>{mealItem.name}</ListGroupItem>\n              </Link>\n            ))}\n          </ListGroup>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default MealMenu;\n","import React from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { Card, CardBody, CardTitle, CardText } from \"reactstrap\";\n\nfunction MealItem({ mealItems, cantFind }) {\n  const { id } = useParams();\n\n  let mealItem = mealItems.find(mealItem => mealItem.id === id);\n  if (!mealItem) return <Redirect to={cantFind} />;\n\n  return (\n    <section>\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n            {mealItem.name}\n          </CardTitle>\n          <CardText className=\"font-italic\">{mealItem.description}</CardText>\n          <p>\n            <b>Recipe:</b> {mealItem.recipe}\n          </p>\n          <p>\n            <b>Serve:</b> {mealItem.serve}\n          </p>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default MealItem;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardText,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from \"reactstrap\";\n\n/** Form for adding a menu item.\n *\n * Props:\n * - addItem: call this to add item in parent\n *\n * State:\n * - local state for each field on form\n *\n */\n\nfunction AddForm({ addMeal }) {\n  const [form, setForm] = useState({\n    type: \"snacks\",\n    name: \"\",\n    description: \"\",\n    recipe: \"\",\n    serve: \"\"\n  });\n  const history = useHistory();\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    setForm(f => ({\n      ...f,\n      [name]: value\n    }));\n  }\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    let { type, ...data } = form;\n    addMeal(type, data);\n    history.push(\"/\");\n  }\n\n  const { type, name, description, recipe, serve } = form;\n\n  return (\n    <section className=\"col-md-4\">\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n            Add Meal\n          </CardTitle>\n          <CardText>\n            Some quick example text to build on the card title and make up the\n            bulk of the card's content.\n          </CardText>\n\n          <Form onSubmit={handleSubmit}>\n            <FormGroup>\n              <Label for=\"type\">Type</Label>\n              <Input\n                type=\"select\"\n                name=\"type\"\n                id=\"type\"\n                value={type}\n                onChange={handleChange}\n              >\n                <option>snacks</option>\n                <option>drinks</option>\n              </Input>\n            </FormGroup>\n\n            <FormGroup>\n              <Label for=\"name\">Name</Label>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                value={name}\n                onChange={handleChange}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <Label for=\"description\">Description</Label>\n              <Input\n                type=\"textarea\"\n                name=\"description\"\n                id=\"description\"\n                value={description}\n                onChange={handleChange}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <Label for=\"recipe\">Recipe</Label>\n              <Input\n                type=\"textarea\"\n                name=\"recipe\"\n                id=\"recipe\"\n                value={recipe}\n                onChange={handleChange}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <Label for=\"serve\">Serve</Label>\n              <Input\n                type=\"textarea\"\n                name=\"serve\"\n                id=\"serve\"\n                value={serve}\n                onChange={handleChange}\n              />\n            </FormGroup>\n\n            <Button className=\"float-right btn btn-outline-light\">\n              Add Item\n            </Button>\n          </Form>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default AddForm;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport { addMeal as SnackOrBoozeApi } from \"./Api\";\nimport NavBar from \"./NavBar\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Menu from \"./MealMenu\";\nimport MealItem from \"./MealItem\";\nimport slugify from \"slugify\";\nimport AddForm from \"./AddForm\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [menu, setMenu] = useState({\n    snacks: [],\n    drinks: []\n  });\n\n\n  useEffect(function() {\n    async function getMealItems() {\n      let snacks = await SnackOrBoozeApi.getSnacks();\n      let drinks = await SnackOrBoozeApi.getDrinks();\n      setMenu({ drinks, snacks });\n      setIsLoading(false);\n    }\n    getMealItems();\n  }, []);\n\n\n  async function addMeal(type, { name, description, recipe, serve }) {\n    let id = slugify(name, { lower: true });\n    let objData = { id, name, description, recipe, serve };\n    await SnackOrBoozeApi(type, objData);\n    setMenu(m => ({\n      ...m,\n      [type]: [...m[type], objData]\n    }));\n  }\n\n\n  \n  let { snacks, drinks } = menu;\n\n  if (isLoading) {\n    return <p>Loading &hellip;</p>;\n  }\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <NavBar />\n        <main>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home snacks={snacks} drinks={drinks} />\n            </Route>\n            <Route exact path=\"/snacks\">\n              <Menu snacks={snacks} title=\"Snacks\" />\n            </Route>\n            <Route exact path=\"/drinks\">\n              <Menu snacks={drinks} title=\"Drinks\" />\n            </Route>\n            <Route path=\"/snacks/:id\">\n              <MealItem mealitems={snacks} cantFind=\"/snacks\" />\n            </Route>\n            <Route path=\"/drinks/:id\">\n              <MealItem mealitems={drinks} cantFind=\"/drinks\" />\n            </Route>\n            <Route path=\"/add\">\n              <AddForm addMeal={addMeal} />\n            </Route>\n            <Route>\n              <p>Hmmm. I can't seem to find what you want.</p>\n            </Route>\n          </Switch>\n        </main>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}